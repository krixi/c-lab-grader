#!/bin/bash
# Marissa Joehler
# CSCI 112 - Programming with C
# 2/1/2016 
echo "CSCI 112 - Lab Grader"

# This is an automatic grading script for this course. 
usage()
{
    echo "Usage: `basename $0` [options] <assignment name> <path> "
    echo "      <path> can be either a file or folder name"
    echo "Options:"
    echo "  -u  =   Update this script"
    echo "  -f  =   Fetch the latest lab materials for the given lab"
    echo "  -p  =   Print output"
    echo "  -k  =   Keep output log, even if execution is perfect"
    # Hidden options, since they won't really need to be changed...
    #echo "  -a  =   Set the archive URL"
    #echo "  -s  =   Set the script URL"
    exit 1;
}

# Initialize defaults
archive_url="http://www.cs.montana.edu/~marissa.joehler/csci-112-labs"
script_url="https://raw.githubusercontent.com/krixi/c-lab-grader/master/grade"
update_self=0
update_lab=0
print_output=0
keep_output=0
while getopts "a:s:ufpk?" option; do
    case $option in
        a) archive_url=$OPTARG ;;
        s) script_url=$OPTARG ;;
        u) update_self=1 ;;
        f) update_lab=1 ;;
        p) print_output=1 ;;
        k) keep_output=1 ;;
        \?) usage ;;
    esac
done
shift $((OPTIND-1))


# Check if updating this script.
if [ $update_self -eq 1 ]; then
    echo "Checking for update..."
    # Download latest version
    curl "$script_url" -o "${0}.next"
    rv=$?
    if [ $rv -ne 0 ]; then
        echo "ERROR: Could not download update for this script"
        exit 1
    else
        echo "Downloaded the current version of the grading script."
        mv "$0" "${0}.bak"
        mv "${0}.next" "$0"
        exit 0
    fi
fi


# make sure we have enough parameters. 
if [ $# -lt 2 ]; then
    usage
fi

# Get the input 
assignment=$1
input=$2
files=''
out_dir="${assignment}_results"
scores_csv="$out_dir/scores.csv"
grade_script="grade_${assignment}"
tmp_dir=".${assignment}";
echo "Assignment:   $assignment"
echo "Input:        $input"
echo "Output:       $out_dir"
echo ""

# Make sure the assignment name is reasonable.
[[ $assignment =~ ^[a-z]{3,}[0-9]$ ]] || assignment=""
if [ -z "$assignment" ]; then
    echo "ERROR: Invalid assignment name"
    exit 1
fi

# Check if we have a file or a folder to test
if [ -d "$input" ]; then
    files="${input}/*.c"
elif [ -f "$input" ]; then
    files="$input"
else
    echo "ERROR: $input is not a file or folder"
    exit 1
fi

# Check if we should overwrite the output folder. 
if [ -d "$out_dir" ]; then
    read -p "Output folder already exists. Overwrite? (y/n) " -n 1 -r
    echo 
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        rm -rf "$out_dir"
    else
        exit 1
    fi
fi

if [ $update_lab -eq 1 -a -d "$tmp_dir" ]; then
    echo "Updating lab materials, removing: $tmp_dir"
    rm -rf "$tmp_dir"
fi

# Check if we have the files necessary to test this assignment. 
# 1) Check for a folder with the assignment name
if [ \! -d "$tmp_dir" ]; then
    echo "No $tmp_dir folder, checking for archive..."
    # 2) No folder, check for tar
    tar_file="${assignment}.tar.gz"
    if [ \! -f "$tar_file" ]; then
        # 3) No tar file, try to download it.
        echo "No archive found locally, checking for download: "
        echo "      ${archive_url}/${tar_file}" 
        http_response=`curl -I "${archive_url}/${tar_file}" 2>/dev/null | head -n 1`
        echo "$http_response"
        http_code=`echo "$http_response" | cut -d$' ' -f2`

        if [ "200" == "$http_code" ]; then
            echo "Downloading $assignment grading materials..."
            # 4) The tar file exists, so download it. 
            curl "${archive_url}/${tar_file}" -o "$tar_file" 
            rv=$? # wait for it to complete and check if it succeeded.
            if [ $rv -ne 0 ]; then
                echo "ERROR: Unable to download materials for $assignment, please try again later"
                exit 1
            fi
        else
            echo "ERROR: No grading materials available for $assignment"
            exit 1
        fi
    fi

    echo "Extracting ${tar_file}:"
    # extract the tar
    mkdir -p "$tmp_dir"
    tar -zxvf "${tar_file}" -C "$tmp_dir" --strip-components 1 
    rv=$? #wait to finish and check if succeeded
    if [ $rv -ne 0 ]; then
        echo "ERROR: Unable to extract archive! Try deleting ${tar_file} and running this program again"
        exit 1
    fi
    
    # remove the archive, the files have been extracted
    rm "$tar_file"
fi

# make sure the folders and files we expect now exist/ were downloaded and created from the code just above 
if [ \! -d "$tmp_dir" ]; then
    echo "ERROR: Not able to find folder: $tmp_dir"
    exit 1
fi
if [ \! -f "${tmp_dir}/${grade_script}" ]; then
    echo "ERROR: folder $tmp_dir does not contain the required script: $grade_script"
    exit 1
fi


# Create the directory for the output
mkdir "$out_dir"

# Convert scores filename to absolute
scores_csv=`readlink -f "$scores_csv"`

# Assemble a scoresheet .csv file: 
# <last name>, <first name>, <compile score>, <run score>, <output score>, <comment score>
# <compile score> = 2 if compiles with no errors or warnings, 1 if warnings, 0 if errors. 
# <run score> = 2 if runs and exits with no error, 1 if exits with error, 0 if does not run
# <output score> = 2 if the output matches, 1 if formatting is off but values are there, 0 if values are off. 
echo "last_name,first_name,compile_score,run_score,output_score,comment_score" >> "$scores_csv"

echo "Running tests..."
# Loop through all of the files in the input, and process them one by one, by calling the lab-specific script. 
for file in $files
do
    name=`basename $file | sed 's/\(.*\)\.c/\1/'`
    echo "[$name]"
    out_file="$out_dir/${name}.out"
    fullname=`readlink -f "$file"`
    
    # Call the lab-specific grading script. 
    "${tmp_dir}/${grade_script}" $fullname $scores_csv > "$out_file" 2>&1
    rv=$?
    
    # print out output if that is enabled
    if [ $print_output -eq 1 ]; then
        cat "$out_file"
    fi

    # Remove the log file if that's enabled
    if [ $rv -eq 0 ]; then
        echo "No errors detected!"
        if [ $keep_output -eq 0 ]; then
            echo "Deleting output file: $out_file"
            rm "$out_file"
        fi
    else
        echo "Errors were encountered"
    fi

done

echo "Scores:"
echo "-------------------------------------------------------------------------"
cat "$scores_csv"
echo "-------------------------------------------------------------------------"
echo "All done!"
exit 0
