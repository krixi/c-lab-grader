#!/bin/bash
# Marissa Joehler
# CSCI 112 - shell script to grade lab0
# 2/2/2016

# Specific values for this lab:
assignment="lab0"
CC=gcc
CFLAGS="-Wall"
tests_dir="tests"
comment_weight=4.2
create_tests=0

usage()
{
    echo "Usage: `basename $0` <file to test> <scores.csv>"
    exit 1; 
}

# Make sure we have the parameters:
# $1 = The path to the file to test
# $2 = The path to the scores.csv file to update.
if [ $# -lt 2 ]; then
    echo "ERROR: Not enough parameters"
    usage
fi

inputfile=$1
if [ \! -f "$inputfile" ]; then
    echo "ERROR: Cannot find file: $inputfile"
    exit 1
fi
scores_csv=$2
if [ \! -f "$scores_csv" ]; then
    echo "ERROR: Cannot find file: $scores_csv"
    exit 1
fi

# This is the current directory
cur_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" 
tests_dir="${cur_dir}/${tests_dir}";



#  last_name,first_name,compile_score,run_score,output_score,comment_score  >> "$scores_csv"

# make sure it follows the naming convention - extract everything between the underscores, convert to array
names=`echo $(basename "$inputfile") | sed 's/\(.*\)_\(.*\)_\(.*\)\.c/\1 \2 \3/'`
names=($names)
names_len=${#names[@]}
lab_name=""
student_name=""
for ((i=0; i<${names_len}; i++ )); do
    if [ $((i+1)) -eq $names_len ]; then
        lab_name=${names[$i]}
    else
        student_name="$student_name ${names[$i]}"
    fi
done
echo "Assignment: $lab_name"
echo "Student:    $student_name"
echo 

if [ "$lab_name" != "$assignment" ]; then
    echo "ERROR: Expected assignment name: $assignment"
    echo "Please remember to name your file using this convention: last_first_labN.c"
    echo "Skipping $inputfile ..."
    echo ""
    exit 1
fi


# print put the filename
echo "[`basename $inputfile`]"

# reset the scores
compile_score=2
run_score=0
output_score=0
comment_score=0
prog="${assignment}_prog"

echo
echo "------------"
echo "Compiling..."
echo "------------"
echo

# compile it
${CC} ${CFLAGS} "$inputfile" -o "$prog" 2> "$assignment.err" > "$assignment.out"
rv=$?

# Check for compiler errors and warmings. 
if [ $rv -ne 0 ]; then
    echo "Detected compiler error:" 
    cat "$assignment.err" "$assignment.out" 
    echo 
    compile_score=0
elif [ -s "$assignment.err" ]; then
    echo "Detected compiler warning:" 
    cat "$assignment.err" "$assignment.out" 
    echo 
    compile_score=1
else
    echo "OK!"
    echo
fi

out_ok=0
runs_ok=0
total_runs=0
# Run it though all of the tests in the test directory. 
# the way these work is that each .txt file in the test directory is a set of sample input
# We should just be able to pipe the file to the program 
for testfile in "$tests_dir"/*.txt
do
    ((total_runs++))
    echo 
    echo "[====================== test $total_runs: `basename $testfile` ======================]" 

    # Show the input
    echo
    echo "------"
    echo "Input:"
    echo "------"
    echo
    cat $testfile
    echo 

    # Run it
    ./"$prog" < $testfile > "$assignment.out" 2> "$assignment.err"
    rv=$?

    echo
    echo "-------"
    echo "Output:"
    echo "-------"
    echo
    cat "$assignment.out"
    echo 

    echo
    echo "----------"
    echo "Execution:"
    echo "----------"
    echo
    if [ $rv -ne 0 ]; then
        echo "Detected runtime error:" 
        cat "$assignment.err" 
        echo 
    elif [ -s "$assignment.err" ]; then
        echo "Detected runtime warning:" 
        cat "$assignment.err" 
        echo 
    else
        echo "OK!"
        ((runs_ok++))
    fi


    result_file="`dirname $testfile`/results"
    if [ \! -d "$result_file" ]; then
        mkdir "$result_file"
    fi
    result_file="$result_file/`basename $testfile`"
    if [ \! -f "$result_file" ]; then
        echo "Result file does not exist:"
        echo "  $result_file"

        if [ $create_tests -ne 1 ]; then
            exit 1
        else 
            echo
            read -p "Create from these results? (y/n) " -n 1 -r
            echo 
            if [[ $REPLY =~ ^[Yy]$ ]]
            then
                cp "$assignment.out" "$result_file"
            fi
        fi
    fi

    echo
    echo "----------------"
    echo "Checking output:"
    echo "----------------"
    echo

    # Make sure the output is what is expected
    diff -ud "$result_file" "$assignment.out" > "$assignment.err" 2>/dev/null
    rv=$?
    if [ $rv -ne 0 -o -s "$assignment.err" ]; then
        # Print diff to ouput file
        echo "Detected diff error:"
        cat "$assignment.err" 
        echo

        # Check for GREP tests
        grep_test=`echo $(basename "$testfile") | sed 's/\.txt/\.grep/'`
        grep_lines=0
        grep_ok=0
        if [ -f "$tests_dir/$grep_test" ]; then
            echo "Formatting is off, checking for correct values..."
            echo
            while IFS='' read -r line || [[ -n "$line" ]]; do
                echo "Checking for value: $line"
                grep_rv=$(cat "$assignment.out" | grep "$line" | wc -l)
                ((grep_lines++))
                if [ $grep_rv -gt 0 ]; then
                    echo "OK!"
                    # For lab 0 and 1, its ok if the values are there
                    ((grep_ok++))
                fi
            done < "$tests_dir/$grep_test"

            if [ $grep_lines -eq $grep_ok -a $grep_lines -gt 0 ]; then
                ((out_ok++))
                echo
                echo "All values OK!"
                echo
            fi
        fi
    else
        echo "OK!"
        echo
        ((out_ok++))
    fi

done


echo
run_score=$( awk "BEGIN {printf \"%.2f\", ${runs_ok}/${total_runs} * 2; exit(0)}")
output_score=$( awk "BEGIN {printf \"%.2f\", ${out_ok}/${total_runs} * 2; exit(0)}")
compile_score=$( awk "BEGIN {printf \"%.2f\", ${compile_score}; exit(0)}")

# Check for comments. 
comment_count=`( grep "/\*" $inputfile; grep "//" $inputfile; grep "^ \*" $inputfile; ) | cat | wc -l`
line_count=`cat $inputfile | wc -l`
comment_score=$( awk "BEGIN {printf \"%.2f\", (${comment_weight} * ${comment_count})/${line_count} * 2; exit(0)}")


echo "---------------------------------------------------------"
echo "         TEST RESULTS FOR ASSIGNMENT: $assignment"
echo
echo " Student:     $student_name"
echo " Compiling:   $compile_score"
echo " Execution:   $run_score ($runs_ok/$total_runs)"
echo " Output:      $output_score ($out_ok/$total_runs)"
echo " Comments:    $comment_score "
echo

# Write it out to a csv file
echo "$student_name,$compile_score,$run_score,$output_score,$comment_score" >> "$scores_csv"

# clean up
rm "$prog" "$assignment.err" "$assignment.out"

exit 0;
